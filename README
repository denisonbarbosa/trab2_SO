############################################# AUTORES ############################################

Denison Barbosa
Matheus Neri
Patrick Escorsi

###################################### COMPILAÇÃO E EXECUÇÃO #####################################

Acesse o diretório referente ao teste que deseja executar;
Utilize o comando make para compilar os arquivos necessários;
Execute o arquivo gerado pela compilação.

#################################### DOCUMENTAÇÃO DAS FUNÇÕES ####################################

Os comentários referentes ao funcionamento das funções, seus argumentos e retornos
encontram-se nos headers (.h). 

###################################### FUNCIONALIDADE EXTRA ######################################

O escalonador justo foi implementado e pode ser "ligado" através da função
set_fair_scheduler(bool_t status), declarada em threadu.h e implementada em thread.c.

O escalonamento padrão é o FCFS, mas caso queira utilizar o fair_scheduler, 
invoque set_fair_scheduler(TRUE).
Para retornar para o FCFS, basta invocar set_fair_scheduler(FALSE).

########################################### OBSERVAÇÔES ###########################################

Algumas funções criadas para debug e verificação (como a print_queue, em queue.c) foram deixadas
na versão final, caso haja interesse em checar a estrutura.

###################################################################################################